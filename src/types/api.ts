// let's imagine this file is autogenerated from the backend
// ideally, we want to keep these api related types in sync
// with the backend instead of manually writing them out

export type BaseEntity = {
  id: string;
  createdAt: string;
};

export type Entity<T> = {
  [K in keyof T]: T[K];
} & BaseEntity;

export type Meta = {
  page: number;
  total: number;
  totalPages: number;
};

export type User = Entity<{
  username: string;
  email: string;
  password: string;
}>;

export type AuthResponse = {
  jwt: string;
  user: User;
};

/*==========Testing zone==========*/
export type Pagination = {
  total: number;
  page: number;
  limit: number;
  nextUrl: string;
};

export type UserResponse = {
  succcess: boolean;
  message: string;
  data: {
    id: string;
    username: string;
    email: string;
    karma: number;
    bio: string;
    avatar: string;
    role: string;
    created_at: string;
    updated_at: string;
  };
};

export type RegisterResponse = {
  success: boolean;
  message: string;
};

type ModeratedCommunity = {
  communityId: string;
  role: string;
};
export type LoginResponse = {
  success: boolean;
  message: string;
  data: {
    username: string;
    avatar: string;
    access_token: string;
    moderatedCommunities: ModeratedCommunity[];
  };
};

/* ____________________Community____________________ */
type Moderators = {
  userId: number;
  username: string;
  avatar: string;
  role: string;
};
export type Community = {
  id: number;
  name: string;
  shortDescription: string;
  description: string;
  coverImage: string;
  isPrivate: boolean;
  createdAt: string;
  totalMembers: number;
  moderators: Moderators[];
};
/* ____________________End Community____________________ */

export type CommunityResponse = {
  success: boolean;
  message: string;
  data: Community[];
};

export type CreateCommunityResponse = {
  success: boolean;
  message: string;
};

/* ____________________Post____________________ */
export type Post = {
  id: number;
  communityId: number;
  community: {
    id: number;
    name: string;
  };
  authorId: number;
  author: {
    id: number;
    username: string;
  };
  type: string;
  title: string;
  content: string;
  mediaUrls: string[];
  tags: string[];
  vote: number;
  createdAt: string;
  updatedAt: string;
};
/* ____________________End Post____________________ */

/*==========End Testing zone==========*/

export type Team = Entity<{
  name: string;
  description: string;
}>;

export type Discussion = Entity<{
  title: string;
  body: string;
  teamId: string;
  author: User;
}>;

export type Comment = Entity<{
  body: string;
  discussionId: string;
  author: User;
}>;
