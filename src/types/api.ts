// let's imagine this file is autogenerated from the backend
// ideally, we want to keep these api related types in sync
// with the backend instead of manually writing them out

export type BaseEntity = {
  id: string;
  createdAt: string;
};

export type Entity<T> = {
  [K in keyof T]: T[K];
} & BaseEntity;

export type Meta = {
  page: number;
  total: number;
  totalPages: number;
};

/* Delete this when testing is done */
export type UserOld = Entity<{
  username: string;
  email: string;
  password: string;
  role: string;
}>;

export type AuthResponse = {
  jwt: string;
  user: User;
};

/*==========Testing zone==========*/
export type Pagination = {
  total: number;
  page: number;
  limit: number;
  nextUrl: string;
};

export type User = {
  id: number;
  username: string;
  email: string;
  karma: number;
  bio: string;
  avatar: string;
  role: string;
  created_at: string;
  updated_at: string;
};

export type RegisterResponse = {
  success: boolean;
  message: string;
};

type ModeratedCommunity = {
  communityId: number;
  role: string;
};
export type LoginResponse = {
  success: boolean;
  message: string;
  data: {
    username: string;
    avatar: string;
    accessToken: string;
    moderatedCommunities: ModeratedCommunity[];
  };
};

/* ____________________Community____________________ */
type Moderators = {
  userId: number;
  username: string;
  avatar: string;
  role: string;
};
export type Community = {
  id: number;
  name: string;
  shortDescription: string;
  description: string;
  coverImage: string;
  isPrivate: boolean;
  createdAt: string;
  totalMembers: number;
  moderators: Moderators[];
};
/* ____________________End Community____________________ */

export type CommunityResponse = {
  success: boolean;
  message: string;
  data: Community[];
};

export type CreateCommunityResponse = {
  success: boolean;
  message: string;
};

/* ____________________Post____________________ */
export type Post = {
  id: number;
  communityId: number;
  community: {
    id: number;
    name: string;
  };
  authorId: number;
  author: {
    id: number;
    username: string;
    avatar: string;
  };
  title: string;
  type: string;
  content: string;
  mediaUrls: string[];
  tags: string[];
  vote: number;
  createdAt: string;
  updatedAt: string;
};
/* ____________________Comment____________________ */
/* API RESPONSE:
{
    "success": true,
    "message": "Comments retrieved successfully",
    "data": [
        {
            "id": 66,
            "postId": 12,
            "author": {
                "id": 20,
                "username": "Ha Phat Dep Trai",
                "avatar": "http://media_service_base_url/avatar.jpg"
            },
            "content": "ducphat rep comment bài viết của bạn nè",
            "mediaUrl": "media-url-url",
            "createdAt": "2025-10-30T08:58:47.333024Z",
            "updatedAt": "2025-10-30T09:20:11.185004Z",
            "replies": [
                {
                    "id": 67,
                    "postId": 12,
                    "author": {
                        "id": 20,
                        "username": "Ha Phat Dep Trai",
                        "avatar": "http://media_service_base_url/avatar.jpg"
                    },
                    "parentCommentId": 66,
                    "content": "nguyen van a rep comment của bạn nè",
                    "mediaUrl": "media-url",
                    "createdAt": "2025-10-30T09:30:50.197951Z",
                    "updatedAt": "2025-10-30T09:30:50.197951Z"
                }
            ]
        },
        {
            "id": 65,
            "postId": 12,
            "author": {
                "id": 20,
                "username": "Ha Phat Dep Trai",
                "avatar": "http://media_service_base_url/avatar.jpg"
            },
            "content": "ducphat rep comment bài viết của bạn nè - edit 3",
            "mediaUrl": "media-url-url",
            "createdAt": "2025-10-30T08:43:45.500399Z",
            "updatedAt": "2025-10-30T09:24:09.577802Z"
        }
    ],
    "pagination": {
        "total": 2,
        "page": 1,
        "limit": 12
    }
}

*/
export type Comment = {
  id: number;
  postId: number;
  author: {
    id: number;
    username: string;
    avatar: string;
  };
  content: string;
  mediaUrl: string;
  createdAt: string;
  updatedAt: string;
  replies: Comment[];
};

/* ____________________Image Response____________________ */

export type UploadImageResponse = {
  success: boolean;
  message: string;
  data: {
    url: string;
  }[];
};

/*==========End Testing zone==========*/

export type Team = Entity<{
  name: string;
  description: string;
}>;

export type Discussion = Entity<{
  title: string;
  body: string;
  teamId: string;
  author: User;
}>;
